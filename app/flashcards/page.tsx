"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { ChevronLeft, ChevronRight, RotateCcw, Shuffle } from "lucide-react"
import { Badge } from "@/components/ui/badge"

interface Flashcard {
  id: number
  question: string
  answer: string
  category: string
}

const flashcards: Flashcard[] = [
  {
    id: 1,
    question: "What is encryption?",
    answer:
      "The process of converting readable data into an encoded format that can only be read with the correct decryption key.",
    category: "Encryption",
  },
  {
    id: 2,
    question: "What is the difference between symmetric and asymmetric encryption?",
    answer:
      "Symmetric uses one key for both encryption and decryption. Asymmetric uses a public key for encryption and a private key for decryption.",
    category: "Encryption",
  },
  {
    id: 3,
    question: "What does confidentiality protect in blockchain?",
    answer:
      "Transaction amounts and balances, keeping them hidden from public view while sender and receiver can see full details.",
    category: "Confidentiality",
  },
  {
    id: 4,
    question: "What is the difference between confidentiality and privacy?",
    answer:
      "Confidentiality hides WHAT is being transacted (amounts), while privacy hides WHO is transacting (identities).",
    category: "Privacy",
  },
  {
    id: 5,
    question: "What is a mixer in blockchain privacy?",
    answer: "A tool that pools transactions together to break the link between sender and receiver, enhancing privacy.",
    category: "Privacy",
  },
  {
    id: 6,
    question: "What is a stealth address?",
    answer:
      "A one-time address generated for each transaction to prevent linking multiple transactions to the same recipient.",
    category: "Privacy",
  },
  {
    id: 7,
    question: "What makes Identity-Based Encryption (IBE) unique?",
    answer:
      "Any string (like an email, date, or block number) can serve as a public key, and the private key is generated by a trusted authority when conditions are met.",
    category: "IBE",
  },
  {
    id: 8,
    question: "What is time-locked encryption?",
    answer: "Encryption that can only be decrypted after a specific time or condition is met, enabled by IBE.",
    category: "IBE",
  },
  {
    id: 9,
    question: "What is threshold cryptography?",
    answer:
      "A system where a secret is split into multiple shares, and a minimum threshold of parties must cooperate to decrypt data.",
    category: "TIBE",
  },
  {
    id: 10,
    question: "What does 2-of-3 threshold mean?",
    answer: "At least 2 out of 3 parties must provide their decryption shares to successfully decrypt the data.",
    category: "TIBE",
  },
  {
    id: 11,
    question: "What are confidential stablecoins?",
    answer:
      "Stablecoins where transaction amounts and balances are encrypted, but addresses remain visible for compliance.",
    category: "Confidential Stablecoins",
  },
  {
    id: 12,
    question: "What is selective disclosure?",
    answer:
      "The ability to reveal transaction details to specific authorized parties (like auditors) without making them public.",
    category: "Confidential Stablecoins",
  },
  {
    id: 13,
    question: "What cryptographic techniques power confidential stablecoins?",
    answer:
      "Twisted ElGamal encryption, zero-knowledge proofs, multi-party computation (MPC), and Identity-Based Encryption (IBE).",
    category: "Confidential Stablecoins",
  },
  {
    id: 14,
    question: "Why are private keys important?",
    answer:
      "They must be kept secret to maintain security. Anyone with your private key can access your funds and sign transactions on your behalf.",
    category: "Encryption",
  },
  {
    id: 15,
    question: "What is a zero-knowledge proof?",
    answer:
      "A cryptographic method that allows one party to prove they know something without revealing the actual information.",
    category: "Confidentiality",
  },
]

export default function FlashcardsPage() {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [isFlipped, setIsFlipped] = useState(false)
  const [cards, setCards] = useState(flashcards)

  const currentCard = cards[currentIndex]

  const handleNext = () => {
    setIsFlipped(false)
    setCurrentIndex((prev) => (prev + 1) % cards.length)
  }

  const handlePrevious = () => {
    setIsFlipped(false)
    setCurrentIndex((prev) => (prev - 1 + cards.length) % cards.length)
  }

  const handleShuffle = () => {
    const shuffled = [...cards].sort(() => Math.random() - 0.5)
    setCards(shuffled)
    setCurrentIndex(0)
    setIsFlipped(false)
  }

  const handleReset = () => {
    setCards(flashcards)
    setCurrentIndex(0)
    setIsFlipped(false)
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 text-center">
        <h1 className="mb-4 text-3xl font-bold">Flashcards</h1>
        <p className="text-lg text-muted-foreground">Review key concepts with interactive flashcards</p>
      </div>

      <div className="mx-auto max-w-2xl">
        {/* Progress */}
        <div className="mb-6 flex items-center justify-between">
          <Badge variant="secondary">
            {currentIndex + 1} / {cards.length}
          </Badge>
          <Badge variant="outline">{currentCard.category}</Badge>
        </div>

        {/* Flashcard */}
        <div
          className="perspective-1000 mb-8 cursor-pointer"
          onClick={() => setIsFlipped(!isFlipped)}
          style={{ perspective: "1000px" }}
        >
          <div
            className="relative h-80 transition-transform duration-500"
            style={{
              transformStyle: "preserve-3d",
              transform: isFlipped ? "rotateY(180deg)" : "rotateY(0deg)",
            }}
          >
            {/* Front */}
            <Card
              className="absolute inset-0 flex items-center justify-center backface-hidden"
              style={{ backfaceVisibility: "hidden" }}
            >
              <CardContent className="p-8 text-center">
                <p className="mb-4 text-sm font-medium text-muted-foreground">Question</p>
                <p className="text-balance text-xl font-medium leading-relaxed">{currentCard.question}</p>
                <p className="mt-8 text-sm text-muted-foreground">Click to reveal answer</p>
              </CardContent>
            </Card>

            {/* Back */}
            <Card
              className="absolute inset-0 flex items-center justify-center backface-hidden bg-gradient-to-br from-[#55C2F6] to-[#0ABAB5] text-white"
              style={{
                backfaceVisibility: "hidden",
                transform: "rotateY(180deg)",
              }}
            >
              <CardContent className="p-8 text-center">
                <p className="mb-4 text-sm font-medium opacity-90">Answer</p>
                <p className="text-balance text-lg leading-relaxed">{currentCard.answer}</p>
                <p className="mt-8 text-sm opacity-75">Click to see question</p>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Controls */}
        <div className="flex flex-col gap-4">
          <div className="flex gap-4">
            <Button onClick={handlePrevious} variant="outline" className="flex-1 bg-transparent">
              <ChevronLeft className="mr-2 h-4 w-4" />
              Previous
            </Button>
            <Button onClick={handleNext} variant="outline" className="flex-1 bg-transparent">
              Next
              <ChevronRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
          <div className="flex gap-4">
            <Button onClick={handleShuffle} variant="outline" className="flex-1 bg-transparent">
              <Shuffle className="mr-2 h-4 w-4" />
              Shuffle
            </Button>
            <Button onClick={handleReset} variant="outline" className="flex-1 bg-transparent">
              <RotateCcw className="mr-2 h-4 w-4" />
              Reset
            </Button>
          </div>
        </div>

        {/* Keyboard Shortcuts */}
        <div className="mt-8 rounded-lg bg-muted/30 p-4">
          <p className="mb-2 text-sm font-medium">Keyboard Shortcuts</p>
          <div className="grid gap-2 text-sm text-muted-foreground">
            <div className="flex justify-between">
              <span>Flip card</span>
              <kbd className="rounded bg-muted px-2 py-1 text-xs">Space</kbd>
            </div>
            <div className="flex justify-between">
              <span>Next card</span>
              <kbd className="rounded bg-muted px-2 py-1 text-xs">→</kbd>
            </div>
            <div className="flex justify-between">
              <span>Previous card</span>
              <kbd className="rounded bg-muted px-2 py-1 text-xs">←</kbd>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
