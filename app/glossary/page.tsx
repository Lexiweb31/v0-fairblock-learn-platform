"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Search, Lock, Eye, Shield, Key, Users, Coins, Clock, FileKey, Zap } from "lucide-react"

interface GlossaryTerm {
  term: string
  definition: string
  category: string
  icon: React.ElementType
}

const glossaryTerms: GlossaryTerm[] = [
  {
    term: "Asymmetric Encryption",
    definition:
      "Encryption using a public key for encryption and a private key for decryption. Also known as public-key cryptography.",
    category: "Encryption",
    icon: Key,
  },
  {
    term: "Cipher Text",
    definition: "Encrypted data that is unreadable without the decryption key.",
    category: "Encryption",
    icon: Lock,
  },
  {
    term: "Confidentiality",
    definition: "Keeping transaction amounts and balances hidden from public view while maintaining verifiability.",
    category: "Confidentiality",
    icon: Eye,
  },
  {
    term: "Confidential Stablecoins",
    definition:
      "Stablecoins with encrypted amounts and balances, enabling private transactions while maintaining compliance.",
    category: "Confidential Stablecoins",
    icon: Coins,
  },
  {
    term: "Homomorphic Encryption",
    definition: "Encryption that allows computations on encrypted data without decrypting it first.",
    category: "Confidentiality",
    icon: Zap,
  },
  {
    term: "Identity-Based Encryption (IBE)",
    definition:
      "Encryption where any string can serve as a public key, with private keys generated by a trusted authority when conditions are met.",
    category: "IBE",
    icon: FileKey,
  },
  {
    term: "Mixer",
    definition: "A privacy tool that pools transactions together to break the link between sender and receiver.",
    category: "Privacy",
    icon: Shield,
  },
  {
    term: "Multi-Party Computation (MPC)",
    definition:
      "A cryptographic protocol allowing multiple parties to jointly compute a function while keeping their inputs private.",
    category: "TIBE",
    icon: Users,
  },
  {
    term: "Plain Text",
    definition: "Readable, unencrypted data before encryption is applied.",
    category: "Encryption",
    icon: Lock,
  },
  {
    term: "Privacy",
    definition: "Protecting user identities and preventing transactions from being linked to real-world individuals.",
    category: "Privacy",
    icon: Shield,
  },
  {
    term: "Private Key",
    definition: "A secret cryptographic key used to decrypt data or sign transactions. Must be kept secure.",
    category: "Encryption",
    icon: Key,
  },
  {
    term: "Public Key",
    definition: "A cryptographic key that can be shared publicly and is used to encrypt data or verify signatures.",
    category: "Encryption",
    icon: Key,
  },
  {
    term: "Ring Signature",
    definition: "A cryptographic signature that hides the true signer among a group of possible signers.",
    category: "Privacy",
    icon: Shield,
  },
  {
    term: "Selective Disclosure",
    definition: "The ability to reveal transaction details to specific authorized parties without making them public.",
    category: "Confidential Stablecoins",
    icon: Eye,
  },
  {
    term: "Stealth Address",
    definition:
      "A one-time address generated for each transaction to prevent linking multiple transactions to the same recipient.",
    category: "Privacy",
    icon: Shield,
  },
  {
    term: "Symmetric Encryption",
    definition:
      "Encryption using the same key for both encryption and decryption. Fast but requires secure key sharing.",
    category: "Encryption",
    icon: Lock,
  },
  {
    term: "Threshold Cryptography",
    definition:
      "A system where a secret is split into shares, requiring a minimum threshold of parties to cooperate for decryption.",
    category: "TIBE",
    icon: Users,
  },
  {
    term: "Threshold IBE (TIBE)",
    definition:
      "Identity-Based Encryption requiring multiple parties to cooperate for decryption, providing enhanced security.",
    category: "TIBE",
    icon: Users,
  },
  {
    term: "Time-Locked Encryption",
    definition: "Encryption that can only be decrypted after a specific time or condition is met.",
    category: "IBE",
    icon: Clock,
  },
  {
    term: "Twisted ElGamal",
    definition: "An encryption scheme used in confidential transactions that supports homomorphic properties.",
    category: "Confidential Stablecoins",
    icon: Coins,
  },
  {
    term: "Zero-Knowledge Proof",
    definition: "A cryptographic method proving knowledge of information without revealing the information itself.",
    category: "Confidentiality",
    icon: Zap,
  },
]

export default function GlossaryPage() {
  const [searchQuery, setSearchQuery] = useState("")

  const filteredTerms = glossaryTerms.filter(
    (term) =>
      term.term.toLowerCase().includes(searchQuery.toLowerCase()) ||
      term.definition.toLowerCase().includes(searchQuery.toLowerCase()) ||
      term.category.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  const categories = Array.from(new Set(glossaryTerms.map((t) => t.category)))

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 text-center">
        <h1 className="mb-4 text-3xl font-bold">Glossary</h1>
        <p className="text-lg text-muted-foreground">Quick reference for blockchain privacy and encryption terms</p>
      </div>

      {/* Search */}
      <div className="mx-auto mb-8 max-w-2xl">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-muted-foreground" />
          <Input
            type="text"
            placeholder="Search terms..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* Categories */}
      <div className="mb-8 flex flex-wrap justify-center gap-2">
        {categories.map((category) => (
          <Badge key={category} variant="secondary">
            {category}
          </Badge>
        ))}
      </div>

      {/* Terms */}
      <div className="mx-auto max-w-4xl">
        {filteredTerms.length === 0 ? (
          <div className="py-12 text-center text-muted-foreground">No terms found matching your search.</div>
        ) : (
          <div className="grid gap-6 md:grid-cols-2">
            {filteredTerms.map((item) => {
              const Icon = item.icon
              return (
                <Card key={item.term} className="transition-shadow hover:shadow-lg">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <CardTitle className="mb-2 text-lg">{item.term}</CardTitle>
                        <Badge variant="outline" className="text-xs">
                          {item.category}
                        </Badge>
                      </div>
                      <div className="ml-4 flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-lg bg-gradient-to-br from-[#55C2F6] to-[#0ABAB5]">
                        <Icon className="h-5 w-5 text-white" />
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="leading-relaxed text-muted-foreground">{item.definition}</p>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        )}
      </div>
    </div>
  )
}
